/*
CSS layouts: Flexboxes, grids

Flexboxes - they are one dimensional, they can either be in a column or in a row. It can be used in:
            - search bars since it combines the different components together
            - It can be used in a nav bar
            - image gallery
*/

.flexClass{
    display: flex;
    flex-direction: column; /*row*/
    flex: 1 1 auto; /*  flex-grow set to 1, flex-shrink to 1 and flex-basis to auto */
    justify-content: center;
}

/*
absolute units - Constant across different devices: include mm,px,pt
relative units - defined ‘in relation’ to the other elements present inside the parent element: 
                    em - Font size of the parent where present.
                    % - Denotes a percentage value in relation to its parent element. 

*/



/*


Note: ‘|’ stands for alternatives or OR.
Grid 

selector{
display: grid| inline-grid
}


Grid shorthand consists of the following properties with default values:

grid:

grid-template-rows: none

grid-template-columns: none

grid-template-areas: none

grid-auto-rows: auto

grid-auto-columns: auto

grid-auto-flow: row

grid-column-gap: 0

grid-row-gap: 0

column-gap: normal

row-gap: normal
Grid properties for container

grid-template-columns: measurement units | % units |repeat()

grid-template-rows: measurement units | % units |repeat()

grid-auto-columns: measurement unit (fixed value for all columns)

grid-auto-rows: measurement unit (fixed value for all rows)

grid-template: “header header” auto

“main right” 75vh

“footer footer” 20rem

grid-template-areas: “header header”

“main right”

“footer footer”
Gap

grid-gap: measurement units

grid-column-gap: measurement units

grid-row-gap: m-unit-1  m-unit-2
Alignment

justify-items: start | center | end | stretch

align-items: start | center | end | stretch

place-items: start | stretch /* shorthand for two properties above 
Justification

justify-content: start | center | end | stretch | space-between | space-evenly | space-around

align-content: start | center | end | stretch | space-between | space-evenly | space-around

place-content: center | start
Positioning

grid-auto-flow: row | column | dense

grid-auto-columns: measurement units

grid-auto-rows: measurement units
Grid properties for items (child)

grid-column: column position /* E.g. 1/2  

grid-column-start: column start position

grid-column-end: column end position

grid-row:  row position /* E.g. 1/2  

grid-row-start: row start position

grid-row-end: row end position

grid-area: “some name” |  /*E.g.  2/1/3/2 */ /* Shorthand for row-column properties above. 
Justification and alignment

justify-self: start | center | end | stretch

align-self: start | center | end | stretch

place-self: start | stretch /* shorthand for two properties above 
Flexbox

The syntax for creating a flexbox:

selector{

display: flex | inline-flex

}
Properties for flexbox container

flex-direction: row | row-reverse | column | column-reverse

flex-wrap: wrap | nowrap

align-items: flex-start | flex-end | center | stretch

justify-content: flex-start | flex-end | center | space-between | space-evenly | space-around

Properties for flexbox items (child)
Shorthand:

flex:

flex-grow: factor of flex’s main size    /* E.g. 1 

flex-shrink: factor of flex’s main size    /* E.g. 0 

flex-basis: auto | factor of main’s size | measurement unit

order:position in flex /* Set ascending by default 

align-self:  start | center | end | stretch
*/


/*
CSS selectors: elements, id, class

Aside from this we also have atribute selectors
*/

/*
attribute selector
*/
a[class]{
    background-color: aliceblue;
}

a[href*="kenya"]{
    color: yellow;
}

/*
Nth-of-type and nth-child selectors
*/

element:nth-child(n){
    property:value;
}

element:nth-of-type(n){
    property: value;
}



/*
Grouping selectors
*/

element, element {
    property:value;
}



/*
Combination selectors

    1: Descendant Selectors (using space)
    2: Child selectors(>) 
    3: General sibling selectors(~) All siblings
    4: Adjacent sibling selectors(+) - sibling directly after
*/

/*
Pseudo classes

 - User action states: hover, active & focus : -  They have effect while a user is actively enganging with an HTML element
 - Form states: disabled & enabled - (buttons), checked & indeterminate - (checkboxes), valid and invalid
 - Specific position - based states: first-of-type, last-of-type, nth-of-type() & nth-last-of-type()

 - LVHA - Link, Visited, Hover, Active


Pseudo elements - Helps one style a specific part of an element. Examples
 - ::first-letter
 - ::first-line

*/

selector:pseudo-class{
    property:value;
}

selector::pseudo-element {

    property: value; 
   
}


/*

*/