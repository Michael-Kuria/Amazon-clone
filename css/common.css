/*
CSS layouts: Flexboxes, grids

Flexboxes - they are one dimensional, they can either be in a column or in a row. It can be used in:
            - search bars since it combines the different components together
            - It can be used in a nav bar
            - image gallery
*/

.flexClass{
    display: flex;
    flex-direction: column; /*row*/
    flex: 1 1 auto; /*  flex-grow set to 1, flex-shrink to 1 and flex-basis to auto */
    justify-content: center;
}

/*
absolute units - Constant across different devices: include mm,px,pt
relative units - defined ‘in relation’ to the other elements present inside the parent element: 
                    em - Font size of the parent where present.
                    % - Denotes a percentage value in relation to its parent element. 

*/



/*


Note: ‘|’ stands for alternatives or OR.
Grid 

selector{
display: grid| inline-grid
}


Grid shorthand consists of the following properties with default values:

grid:

grid-template-rows: none

grid-template-columns: none

grid-template-areas: none

grid-auto-rows: auto

grid-auto-columns: auto

grid-auto-flow: row

grid-column-gap: 0

grid-row-gap: 0

column-gap: normal

row-gap: normal
Grid properties for container

grid-template-columns: measurement units | % units |repeat()

grid-template-rows: measurement units | % units |repeat()

grid-auto-columns: measurement unit (fixed value for all columns)

grid-auto-rows: measurement unit (fixed value for all rows)

grid-template: “header header” auto

“main right” 75vh

“footer footer” 20rem

grid-template-areas: “header header”

“main right”

“footer footer”
Gap

grid-gap: measurement units

grid-column-gap: measurement units

grid-row-gap: m-unit-1  m-unit-2
Alignment

justify-items: start | center | end | stretch

align-items: start | center | end | stretch

place-items: start | stretch /* shorthand for two properties above 
Justification

justify-content: start | center | end | stretch | space-between | space-evenly | space-around

align-content: start | center | end | stretch | space-between | space-evenly | space-around

place-content: center | start
Positioning

grid-auto-flow: row | column | dense

grid-auto-columns: measurement units

grid-auto-rows: measurement units
Grid properties for items (child)

grid-column: column position /* E.g. 1/2  

grid-column-start: column start position

grid-column-end: column end position

grid-row:  row position /* E.g. 1/2  

grid-row-start: row start position

grid-row-end: row end position

grid-area: “some name” |  /*E.g.  2/1/3/2 */ /* Shorthand for row-column properties above. 
Justification and alignment

justify-self: start | center | end | stretch

align-self: start | center | end | stretch

place-self: start | stretch /* shorthand for two properties above 
Flexbox

The syntax for creating a flexbox:

selector{

display: flex | inline-flex

}
Properties for flexbox container

flex-direction: row | row-reverse | column | column-reverse

flex-wrap: wrap | nowrap

align-items: flex-start | flex-end | center | stretch

justify-content: flex-start | flex-end | center | space-between | space-evenly | space-around

Properties for flexbox items (child)
Shorthand:

flex:

flex-grow: factor of flex’s main size    /* E.g. 1 

flex-shrink: factor of flex’s main size    /* E.g. 0 

flex-basis: auto | factor of main’s size | measurement unit

order:position in flex /* Set ascending by default 

align-self:  start | center | end | stretch
*/


/*
CSS selectors: elements, id, class

Aside from this we also have atribute selectors
*/

/*
attribute selector
*/
a[class]{
    background-color: aliceblue;
}

a[href*="kenya"]{
    color: yellow;
}

/*
Nth-of-type and nth-child selectors
*/

element:nth-child(n){
    property:value;
}

element:nth-of-type(n){
    property: value;
}



/*
Grouping selectors
*/

element, element {
    property:value;
}



/*
Combination selectors

    1: Descendant Selectors (using space)
    2: Child selectors(>) 
    3: General sibling selectors(~) All siblings
    4: Adjacent sibling selectors(+) - sibling directly after
*/

/*
Pseudo classes

 - User action states: hover, active & focus : -  They have effect while a user is actively enganging with an HTML element
 - Form states: disabled & enabled - (buttons), checked & indeterminate - (checkboxes), valid and invalid
 - Specific position - based states: first-of-type, last-of-type, nth-of-type() & nth-last-of-type()

 - LVHA - Link, Visited, Hover, Active


Pseudo elements - Helps one style a specific part of an element. Examples
 - ::first-letter
 - ::first-line

*/

selector:pseudo-class{
    property:value;
}

selector::pseudo-element {

    property: value; 
   
}

selector{
    display: value;
}


/*
<<<<<<< HEAD
Value can be the following
inline 	Displays an element as an inline element (like <span>). Any height and width properties will have no effect 	
block 	Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width 	
contents 	Makes the container disappear, making the child elements children of the element the next level up in the DOM 	
flex 	Displays an element as a block-level flex container 	
grid 	Displays an element as a block-level grid container 	
inline-block 	Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values 	
inline-flex 	Displays an element as an inline-level flex container 	
inline-grid 	Displays an element as an inline-level grid container 	
inline-table 	The element is displayed as an inline-level table 	
list-item 	Let the element behave like a <li> element 	
run-in 	Displays an element as either block or inline, depending on context 	
table 	Let the element behave like a <table> element 	
table-caption 	Let the element behave like a <caption> element 	
table-column-group 	Let the element behave like a <colgroup> element 	
table-header-group 	Let the element behave like a <thead> element 	
table-footer-group 	Let the element behave like a <tfoot> element 	
table-row-group 	Let the element behave like a <tbody> element 	
table-cell 	Let the element behave like a <td> element 	
table-column 	Let the element behave like a <col> element 	
table-row 	Let the element behave like a <tr> element 	
none 	The element is completely removed 	
initial 	Sets this property to its default value. Read about initial 	
inherit 	Inherits this property from its parent element. Read about inherit
*/
=======
display:  inline -> 
display: inline-block - > The main difference with inline is that the top and bottom margins/paddings are respected
display: block -> unlike inline-block it adds a line-break after the element, so the element cannot sit next to other elements.


position: static -> normal document flow
position: relative -> an element will be positioned relative to its normal position. 
Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. 
Other content will not be adjusted to fit into any gap left by the element.

position: absolute -> is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).
However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.

position: fixed -> is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. 
The top, right, bottom, and left properties are used to position the element.

position: -webkit-sticky; - in Safari
position: sticky; -> is positioned based on the user's scroll position. A sticky element toggles between relative and fixed, depending on the scroll position. 
It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed)
>>>>>>> abc456dcb9eacde2ac95fcb37a699067fb0d1630

selector{
    clear:value;
}

/*
The clear property sets whether an element must be moved below floating elements that precede it. The clear property applies to floating
and non-floating elements.
*/